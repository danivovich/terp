;; (module prelude.functor)

(letrec fold_list
  (lambda (fn values accumulator)
    (if (empty? values)
        accumulator
        (fold_list
         fn
         (cdr values)
         (fn (car values) accumulator)))))

;; Sum of a list of numbers
;; Usage:
;;     (sum '(1 2 3)) -> 6
(let sum
    (lambda (ns)
      (fold_list
       (lambda (n acc) (+ n acc))
       ns
       0)))

;; Length of a list
;; Usage:
;;     (length '(4 5 6)) -> 3
(let length
    (lambda (ns)
      (fold_list
       (lambda (n acc) (+ 1 acc))
       ns
       0)))
