;; (module prelude.functor)

;; Fold a list into a single value using the provided function.
;; Arguments:
;;     fn          -> A function that takes a value and an accumulator;
;;                    must return a value of the same type as the accumulator.
;;     values      -> A list of values. Lists must be quoted, e.g. '(1 2 3).
;;     accumulator -> An initial value to collect values into.
;; Usage:
;;     (fold_list (lambda (n acc) (+ n acc)) '(1 10 100 1000) 0) -> 1111
(letrec fold_list
  (lambda (fn values accumulator)
    (if (empty? values)
        accumulator
        (fold_list
         fn
         (cdr values)
         (fn (car values) accumulator)))))

;; Sum of a list of numbers
;; Usage:
;;     (sum '(1 2 3)) -> 6
(let sum
    (lambda (ns)
      (fold_list
       (lambda (n acc) (+ n acc))
       ns
       0)))

;; Length of a list
;; Usage:
;;     (length '(4 5 6)) -> 3
(let length
    (lambda (ns)
      (fold_list
       (lambda (n acc) (+ 1 acc))
       ns
       0)))
